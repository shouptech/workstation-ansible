# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH={{ ansible_env.HOME }}/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="gentoo-mod"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git aws)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

if [[ -d ~/.local/bin ]]; then
    export PATH=~/.local/bin:$PATH
fi

if [[ -d ~/go ]]; then
    export GOPATH=$HOME/go
fi

if [[ -d ~/go/bin ]]; then
    export PATH=~/go/bin:$PATH
fi

# Virtualenvwrapper
if [[ -a /usr/local/bin/virtualenvwrapper.sh ]]; then
    source /usr/local/bin/virtualenvwrapper.sh
elif [[ -a /usr/share/virtualenvwrapper/virtualenvwrapper.sh ]]; then
    source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
elif [[ -a $HOME/Library/Python/3.7/bin/virtualenvwrapper.sh ]]; then
    source $HOME/Library/Python/3.7/bin/virtualenvwrapper.sh
fi

# Editor
export EDITOR=vim

# Ansible cow
export ANSIBLE_COW_SELECTION=tux

# Docker tab completion
fpath=(~/.zsh/completion $fpath)
autoload -Uz compinit && compinit -i

#AWS Tab completion
source $(which aws_zsh_completer.sh)

# kubectl tab completion
if [ $commands[kubectl] ]; then
    source <(kubectl completion zsh)
fi

if [ $commands[minikube] ]; then
    source <(minikube completion zsh)
fi

# Kube aliases
k8s.home() {
    if [ ! -z "$K8S_OLD_PS1" ]; then
        export PS1='(k8s: home) '"$K8S_OLD_PS1"
    else
        export K8S_OLD_PS1="$PS1"
        export PS1='(k8s: home) '"$PS1"
    fi
    export FLUX_FORWARD_NAMESPACE=flux
    export KUBECONFIG=~/.kube/home
}

k8s.viperdev() {
    if [ ! -z "$K8S_OLD_PS1" ]; then
        export PS1='(k8s: viperdev) '"$K8S_OLD_PS1"
    else
        export K8S_OLD_PS1="$PS1"
        export PS1='(k8s: viperdev) '"$PS1"
    fi
    export KUBECONFIG=~/.kube/viperdev
}

k8s.zpeks() {
    if [ ! -z "$K8S_OLD_PS1" ]; then
        export PS1='(k8s: zpeks) '"$K8S_OLD_PS1"
    else
        export K8S_OLD_PS1="$PS1"
        export PS1='(k8s: zpeks) '"$PS1"
    fi
    export KUBECONFIG=~/.kube/zpeks
}

k8s.off() {
    unset KUBECONFIG
    if [ ! -z "$K8S_OLD_PS1" ]; then
        export PS1="$K8S_OLD_PS1"
        unset K8S_OLD_PS1
    fi
    if [ ! -z "$FLUX_FORWARD_NAMESPACE" ]; then
        unset FLUX_FORWARD_NAMESPACE
    fi
}

if [[ -d /opt/go/{{ golang_version }}/bin ]]; then
    export PATH=/opt/go/{{ golang_version }}/bin:$PATH
fi

if [[ -d $HOME/.gem/ruby/2.5.0/bin ]]; then
    export PATH=$PATH:$HOME/.gem/ruby/2.5.0/bin
fi

if [[ -d $HOME/.npm-packages ]]; then
    export NPM_PACKAGES="$HOME/.npm-packages"
    if [[ -d $NPM_PACKAGES/bin ]]; then
        export PATH="$NPM_PACKAGES/bin:$PATH"
    fi
    export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"
fi

if [ $commands[op] ]; then
    alias op.login='eval $(op signin {{ op_profile }})'
fi

# MacOS Clipboard copy commands
if [ $commands[pbcopy] ]; then
    # Personal aliases
    alias op.my.workmail='op get item "WorkMail AWS" --vault Personal | jq '"'"'.details.fields[] | select(.name=="password").value'"'"' -r | tr -d '"'"'\n'"'"' | pbcopy'

    # ZP aliases
    alias op.zp.o365='op get item "Daxko O365 / Domain" --vault "Zen Planner" | jq '"'"'.details.fields[] | select(.name=="password").value'"'"' -r | tr -d '"'"'\n'"'"' | pbcopy'
    alias op.zp.sudopw='op get item "sudo password" --vault "Zen Planner" | jq '"'"'.details.fields[] | select(.name=="password").value'"'"' -r | tr -d '"'"'\n'"'"' | pbcopy'
    alias op.zp.ansvaultpw='op get item "Ansible Vault Password" --vault "Zen Planner" | jq .details.password -r | tr -d '"'"'\n'"'"' | pbcopy'
    alias op.zp.jumpcloud='op get item "JumpCloud" --vault "Zen Planner" | jq '"'"'.details.fields[] | select(.type=="P").value'"'"' -r | tr -d '"'"'\n'"'"' | pbcopy'

    op.zp.aws() {
        aws_username="mike.shoup@zenplanner.com"
        aws_password=$(op get item "JumpCloud" | jq '.details.fields[] | select(.designation=="password").value' -r | tr -d "\n")
        if [[ "${aws_password}" == "" ]] ; then ; return 1 ; fi
        aws_otp=$(op get totp "JumpCloud" | tr -d "\n")
        if [[ "${aws_otp}" == "" ]] ; then ; return 1 ; fi
        saml2aws login --username="${aws_username}" --password="${aws_password}" --mfa-token="${aws_otp}" --skip-prompt
    }
    op.zp.motp() {
        motp_code=$(op get totp "Daxko Hosting Domain"  | tr -d "\n")
        motp_pin=$(op get item "Daxko Hosting Domain" | jq '.details.sections[0].fields[] | select(.t=="pin").v' -r | tr -d "\n")
        echo -n "${motp_pin}${motp_code}" | pbcopy
    }
    alias op.zp.hosting="op get item 'Daxko Hosting Domain' | jq '.details.fields[] | select(.designation=="'"'"password"'"'").value' -r | tr -d "'"\n" | pbcopy'
fi

# OpenVPN aliases
alias ovpn.home='sudo openvpn --config /opt/vpn/home.ovpn'

ovpn.zp() {
    op.login
    temp_file=$(mktemp)
    echo "mike.shoup" > ${temp_file}
    password=$(op get item "Daxko O365 / Domain" | jq '.details.fields[] | select(.type=="P").value' -r | tr -d "\n")

    op get totp "Daxko OpenVPN TOTP" | pbcopy

    echo "${password}" >> ${temp_file}
    sudo openvpn --config ~/Nextcloud/vpn/zp/client.ovpn --auth-user-pass ${temp_file}
    rm -f ${temp_file}
}

ovpn.hosting() {
    op.login
    temp_file=$(mktemp)

    motp_code=$(op get totp "Daxko Hosting Domain"  | tr -d "\n")
    motp_pin=$(op get item "Daxko Hosting Domain" | jq '.details.sections[0].fields[] | select(.t=="pin").v' -r | tr -d "\n")
    echo "mshoup" > ${temp_file}
    echo "${motp_pin}${motp_code}" >> ${temp_file}
    sudo openvpn --config ~/Nextcloud/vpn/zp/hosting.ovpn --auth-user-pass ${temp_file}

    rm -f ${temp_file}
}

# rbenv
if [ $commands[rbenv] ]; then
    eval "$(rbenv init -)"
fi

# Work aliases
if [[ "$HOST" =~ "^DEN-(.*)" ]] ; then
    domainusername=mshoup
    username=admmshoup
    key="~/.ssh/id_rsa"

    #QA SSH Shortcuts
    alias qajenkins="ssh -i $key $username@qajenkins.zenplanner.com"

    #Rabbitmq SSH Shortcuts
    alias rabbitmq2="ssh -i $key $username@18.234.127.110"
    alias rabbitmq0="ssh -i $key $username@54.144.212.160"
    alias rabbitmq1="ssh -i $key $username@54.91.111.233"

    #Hosting Production Servers (Note: key/username necessary as that is handled in ~/.ssh/config)
    alias app0="ssh 10.129.10.10"
    alias app1="ssh 10.129.10.11"
    alias app2="ssh 10.129.10.12"
    alias app3="ssh 10.129.10.13"
    alias app4="ssh 10.129.10.14"
    alias app5="ssh 10.129.10.15"
    alias app6="ssh 10.129.10.16"
    alias app7="ssh 10.129.10.17"
    alias app8="ssh 10.129.10.18"
    alias app9="ssh 10.129.10.19"
    alias odin="ssh 10.129.10.8"
    alias beta0="ssh 10.129.10.20"
    alias beta1="ssh 10.129.10.21"
    alias hook0="ssh 10.129.10.24"
    alias hook1="ssh 10.129.10.25"
    alias preview0="ssh 10.129.10.26"
    alias preview1="ssh 10.129.10.27"
    alias jenkins="ssh 10.129.10.50"
    alias service0="ssh 10.129.10.37"
    alias service1="ssh 10.129.10.38"

    #Prod Utility Servers (Monitoring/Jump/etc)
    alias r6col="ssh 10.129.10.39"
    alias jump="ssh -i $key $domainusername@10.129.0.129"
    alias lmcol2="ssh -i $key $username@10.129.6.69"

    export PATH=$HOME/bin:$PATH
    export PATH=$(brew --prefix openvpn)/sbin:$PATH
fi

# MacOS pip user location
if [[ -d "$HOME/Library/Python/3.7" ]] ; then
    export PATH="$HOME/Library/Python/3.7/bin:$PATH"
fi

# Cloning shortcuts
clone.zp() {
  cd ~/code/github.com/ZenPlanner
  git clone "git@github.com:ZenPlanner/${1}.git"
  cd "${1}"
}

clone.shouptech() {
  cd ~/code/gitlab.com/shouptech
  git clone "git@gitlab.com:shouptech/${1}.git"
  cd "${1}"
}

# Alias for codium
if [ $commands[codium] ]; then
  alias code=codium
fi

# Function for setting AWS profile
aws.profile() {
    export AWS_PROFILE="${1}"
}
aws.off() {
    unset AWS_PROFILE
}

if [[ -d "/usr/local/opt/openjdk/bin" ]] ; then
    export PATH="/usr/local/opt/openjdk/bin:$PATH"
fi
